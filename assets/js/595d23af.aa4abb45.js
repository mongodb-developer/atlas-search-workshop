"use strict";(self.webpackChunkatlas_search_workshop=self.webpackChunkatlas_search_workshop||[]).push([[429],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9493:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(4137));const i={sidebar_position:0},o="Index Configuration Overview",l={unversionedId:"index-configuration/overview",id:"index-configuration/overview",title:"Index Configuration Overview",description:"Lab Goals:",source:"@site/docs/index-configuration/overview.mdx",sourceDirName:"index-configuration",slug:"/index-configuration/overview",permalink:"/atlas-search-workshop/docs/index-configuration/overview",draft:!1,editUrl:"https://github.com/mongodb-developer/atlas-search-workshop/blob/main/docs/index-configuration/overview.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"\u2699\ufe0f Index Configuration",permalink:"/atlas-search-workshop/docs/category/\ufe0f-index-configuration"},next:{title:"\ud83d\udd0e Querying",permalink:"/atlas-search-workshop/docs/category/-querying"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"index-configuration-overview"},"Index Configuration Overview"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Lab Goals:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Make various English word stems searchable"))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"First try this aggregation pipeline:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[\n  {\n    $search: {\n      index: "books",\n      phrase: {\n        query: "spaced searches",\n        path: "title"\n      }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      title: 1,\n      score: {\n        $meta: "searchScore"\n      },\n      scoreDetails: {\n        $meta: "searchScoreDetails"\n      }\n    }\n  }\n]\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},'Try "space search" instead, for the ',(0,a.kt)("inlineCode",{parentName:"li"},"query"),".  What's the difference and why?")),(0,a.kt)("p",null,"Let's build a new index with some additional analyzers defined, and while we're going to be\nbuilding a fresh index, we'll go ahead and define some facet fields as well so we don't need to rebuild\nan index in the Facting lab too."),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Create new index on ",(0,a.kt)("inlineCode",{parentName:"li"},"library.books")," named ",(0,a.kt)("inlineCode",{parentName:"li"},"books")," (the initial index created is named ",(0,a.kt)("inlineCode",{parentName:"li"},"default"),"),\nusing this JSON mapping definition")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "mappings": {\n    "dynamic": true,\n    "fields": {\n      "genres": [\n        {\n          "type": "stringFacet"\n        },\n        {\n          "type": "string"\n        }\n      ],\n      "title": {\n        "multi": {\n          "english": {\n            "analyzer": "lucene.english",\n            "type": "string"\n          },\n          "phonetic": {\n            "analyzer": "phonetic",\n            "type": "string"\n          },\n          "shingles": {\n            "analyzer": "standard.shingles",\n            "type": "string"\n          }\n        },\n        "type": "string"\n      },\n      "year": [\n        {\n          "type": "numberFacet"\n        },\n        {\n          "type": "number"\n        },\n        {\n          "type": "stringFacet"\n        }\n      ]\n    }\n  },\n  "analyzers": [\n    {\n      "charFilters": [],\n      "name": "standard.shingles",\n      "tokenFilters": [\n        {\n          "type": "lowercase"\n        },\n        {\n          "maxShingleSize": 3,\n          "minShingleSize": 2,\n          "type": "shingle"\n        }\n      ],\n      "tokenizer": {\n        "type": "standard"\n      }\n    },\n    {\n      "name": "phonetic",\n      "tokenFilters": [\n        {\n          "originalTokens": "include",\n          "type": "daitchMokotoffSoundex"\n        }\n      ],\n      "tokenizer": {\n        "type": "standard"\n      }\n    }\n  ]\n}\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"When that index is active, try this search now:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  {\n    $search: {\n      index: "books",\n      text: {\n        query: "spaced searches",\n        path: {\n          multi: "english",\n          value: "title"\n        }\n      }\n      scoreDetails: true\n    }\n  }\n')),(0,a.kt)("p",null,"Notice how we now can search ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," using the default ",(0,a.kt)("inlineCode",{parentName:"p"},"lucene.standard")," analyzer, or specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"english")," analyzed version.\nWe could have made the default analyzer ",(0,a.kt)("inlineCode",{parentName:"p"},"lucene.english"),' for all dynamic fields where no "multi" path is needed at query\ntime. Having fields analyzed multiple ways is a useful technique for better tuned relevancy or more flexible findability.'),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"path"),' can be an array of path specifications, either concrete field names, wildcard, or "multi" variants.')),(0,a.kt)("p",null,'\u2705 Were you successful in finding "Space Search" from the "spaced searches" query?'),(0,a.kt)("h1",{id:"discussion"},"Discussion"),(0,a.kt)("p",null,"Let's talk about inverted indexes and how Atlas Search maps your Atlas documents to the underlying Lucene index..."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Did you notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"phonetic")," filter we snuck in there?  What can you do with that?"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre"},'  compound: {\n    should: [\n      {\n        phrase: {\n          query: "dao of pooh",\n          path: {"value": "title","multi":"phonetic"},\n        },\n      },\n    ],\n  }\n'))),(0,a.kt)("p",null,"TBD - deserves some diagrams/tables"))}u.isMDXComponent=!0}}]);