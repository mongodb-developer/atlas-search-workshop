"use strict";(self.webpackChunkatlas_search_workshop=self.webpackChunkatlas_search_workshop||[]).push([[247],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(4137)),o=n(9524);const i={},l="2. \ud83d\udd0d $search",s={unversionedId:"end-to-end-lab/search",id:"end-to-end-lab/search",title:"2. \ud83d\udd0d $search",description:"After you've created the default search index on library.books, let's test it out. In this section you'll",source:"@site/docs/end-to-end-lab/2-search.mdx",sourceDirName:"end-to-end-lab",slug:"/end-to-end-lab/search",permalink:"/atlas-search-workshop/docs/end-to-end-lab/search",draft:!1,editUrl:"https://github.com/mongodb-developer/atlas-search-workshop/blob/main/docs/end-to-end-lab/2-search.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"1. \ud83d\uddc2\ufe0f Create Search Index",permalink:"/atlas-search-workshop/docs/end-to-end-lab/create-search-index"},next:{title:"3. \ud83d\udcbb Code",permalink:"/atlas-search-workshop/docs/end-to-end-lab/code"}},c={},p=[{value:"1. &quot;Search Tester&quot;",id:"1-search-tester",level:2},{value:"2. &quot;Edit <code>$search</code> Query&quot;",id:"2-edit-search-query",level:2},{value:"3. Use <code>$search</code> in aggregation pipeline tool",id:"3-use-search-in-aggregation-pipeline-tool",level:2},{value:"4. &quot;Export to Language&quot;",id:"4-export-to-language",level:2}],d={toc:p},h="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2--search"},"2. \ud83d\udd0d ",(0,r.kt)("inlineCode",{parentName:"h1"},"$search")),(0,r.kt)("p",null,"After you've created the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," search index on ",(0,r.kt)("inlineCode",{parentName:"p"},"library.books"),", let's test it out. In this section you'll\ntest your newly created, and Active, index using the Search Tester within the Atlas UI, and then explore using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"$search")," aggregation stage."),(0,r.kt)("h2",{id:"1-search-tester"},'1. "Search Tester"'),(0,r.kt)("p",null,"Navigate to the Search Tester for the ",(0,r.kt)("inlineCode",{parentName:"p"},"library.books")," ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," Atlas Search index.  Try searching for some words from\nyour favorite book titles to see what's available."),(0,r.kt)("img",{alt:"Search Tester",src:(0,o.Z)("/img/end-to-end-lab/search-tester.png")}),(0,r.kt)("h2",{id:"2-edit-search-query"},'2. "Edit ',(0,r.kt)("inlineCode",{parentName:"h2"},"$search"),' Query"'),(0,r.kt)("p",null,'Search for "tao of pooh", so we are all on the same example.  What does the Search Tester do behind the scenes?'),(0,r.kt)("details",null,(0,r.kt)("summary",null,'Click "Edit $search Query"'),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'[\n  {\n    $search: {\n      index: "default",\n      text: {\n        query: "tao of pooh",\n        path: {\n          wildcard: "*"\n        }\n      }\n    }\n  }\n]\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Two things about this query:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"text")," operator will ",(0,r.kt)("em",{parentName:"li"},"OR")," all of the analyzed ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," terms. ",(0,r.kt)("em",{parentName:"li"},"tao OR of OR pooh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'path: {wildcard: "*"}')," searches against every type matching indexed field.")),(0,r.kt)("p",{parentName:"admonition"},"So this is a pretty heavy query, in terms of broadcasting query terms across your entire corpus. Heavy doesn't necessarily\nmean ",(0,r.kt)("em",{parentName:"p"},"slow"),' as this query will complete in a split fraction of a second, though generally we want to craft queries in\na more nuanced, domain and user aware, fashion to improve both precision and recall, leveraging innate relevancy ranking,\nand fine-tuned scoring controls. For example, in this case we probably don\'t really want to match documents that match only\nbecause they have the word "of" indexed in any textual field. Interestingly, the best book for our query does appear first\neven with a broadcast, catch-all sort of query. Relevancy for the win here, as documents rank higher when more of the\nquery terms match. So even with broad queries, relevancy ranking still can do a decent job.')))),(0,r.kt)("h2",{id:"3-use-search-in-aggregation-pipeline-tool"},"3. Use ",(0,r.kt)("inlineCode",{parentName:"h2"},"$search")," in aggregation pipeline tool"),(0,r.kt)("p",null,"Let's go ahead take the next step towards developing ",(0,r.kt)("inlineCode",{parentName:"p"},"$search")," queries, by using an aggregation pipeline tool, such as\nthe Atlas collections aggregation UI or MongoDB Compass. Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"$search")," aggregation pipeline behind the scenes of\nthe Search Tester and navigate to the Atlas ",(0,r.kt)("inlineCode",{parentName:"p"},"library.books"),' collection\'s "Aggregation" tab, pasting it into the "TEXT" area.'),(0,r.kt)("p",null,"While you're here, edit the query to only search by phrase, not just loose OR'd terms, on only the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," field."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"`phrase` search on `title` field"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'\n[\n  {\n    $search: {\n      index: "default",\n      phrase: {\n        query: "tao of pooh",\n        path: ["title"]\n      }\n    }\n  }\n]\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"phrase")," operator first analyzes the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," text into individual terms, then constructs a query that matches these\nterms in consecutive, or close (see ",(0,r.kt)("em",{parentName:"p"},"slop"),' factor), order. In this case, we match those three consecutive words, "tao of pooh",\nin the ',(0,r.kt)("inlineCode",{parentName:"p"},"title")," field. Note how the results are in pretty decent relevancy order (by title).")))),(0,r.kt)("h2",{id:"4-export-to-language"},'4. "Export to Language"'),(0,r.kt)("p",null,"Copy the code for your current aggregation pipeline.  You'll use this code in the next section."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"export to code: Node"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[\n  {\n    '$search': {\n      'index': 'default', \n      'phrase': {\n        'query': 'tao of pooh', \n        'path': [\n          'title'\n        ]\n      }\n    }\n  }\n]\n")))),(0,r.kt)("p",null,"\u2705 Got code? Let's go!"))}u.isMDXComponent=!0}}]);